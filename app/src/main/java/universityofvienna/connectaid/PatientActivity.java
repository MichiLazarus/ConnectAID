package universityofvienna.connectaid;import android.app.Activity;import android.app.AlertDialog;import android.app.TabActivity;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.AsyncTask;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.Menu;import android.view.MenuInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.Switch;import android.widget.TabHost;import android.widget.TextView;import android.widget.Toast;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.NameValuePair;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.message.BasicNameValuePair;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.reflect.Array;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ExecutionException;import model.Patient;import myhttp.MyHttpClient;/** * Created by Benedikt on 16.05.2015. */public class PatientActivity extends Activity {    protected static String scanResult;    protected static String einsatzID;    protected static String phpfile = "https://81.217.54.146/showPatient.php";    private boolean insert = false;    private boolean saveFlag = false;    private TabHost mytabhost;    EditText vorname;    EditText nachname;    EditText svnr;    EditText gebdatum,tag,monat,jahr;    EditText krankenhaus;    EditText medikamente, benachrichtigung, notizen;    Switch bewusstsein, atmung,kreislauf, sauerstoff, intubation, beatmung, blutstillung, pleuradrainage, dringend, verstorben;    Button t1,t2,t3,t4,speichern,back;    ListView listICD;    ListView listSelectedICD;    EditText search;    //DatePicker dpResult;    LinearLayout showicd,seticd;    String prioritaet = "0";    ArrayList<String> icdCodes;    ArrayList<String> selectedICDS = new ArrayList<String>();    ArrayAdapter<String> dataAdapter;    ArrayAdapter<String> selectedAdapter;    ArrayList<String> positions = new ArrayList<String>();    ArrayList<String> icdKeys = new ArrayList<String>();    AlertDialog saveICD,deleteICD;    int positionDialog=0;    String dbPosition;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_tab);         vorname = (EditText) findViewById(R.id.Vorname);         nachname = (EditText) findViewById(R.id.Nachname);         svnr = (EditText) findViewById(R.id.SVNR);         //gebdatum = (EditText) findViewById(R.id.Gebdatum);         //dpResult = (DatePicker) findViewById(R.id.dpResult);         tag = (EditText) findViewById(R.id.day);         monat = (EditText) findViewById(R.id.monat);         jahr = (EditText) findViewById(R.id.jahr);         krankenhaus = (EditText) findViewById(R.id.Krankenhaus);         medikamente = (EditText) findViewById(R.id.medikamente);         benachrichtigung = (EditText) findViewById(R.id.benachrichtigung);         notizen = (EditText) findViewById(R.id.notizen);         bewusstsein = (Switch) findViewById(R.id.bewusstsein);         t1 = (Button) findViewById(R.id.triage1);          t1.setOnClickListener(triageHandler);          t1.setBackgroundResource(android.R.drawable.btn_default);         t2 = (Button) findViewById(R.id.triage2);          t2.setOnClickListener(triageHandler);          t2.setBackgroundResource(android.R.drawable.btn_default);         t3 = (Button) findViewById(R.id.triage3);          t3.setOnClickListener(triageHandler);          t3.setBackgroundResource(android.R.drawable.btn_default);         t4 = (Button) findViewById(R.id.triage4);          t4.setOnClickListener(triageHandler);          t4.setBackgroundResource(android.R.drawable.btn_default);         atmung = (Switch) findViewById(R.id.atmung);         kreislauf = (Switch) findViewById(R.id.kreislauf);         sauerstoff = (Switch) findViewById(R.id.sauerstoff);         intubation = (Switch) findViewById(R.id.intubation);         beatmung = (Switch) findViewById(R.id.beatmung);         blutstillung = (Switch) findViewById(R.id.blutstillung);         pleuradrainage = (Switch) findViewById(R.id.pleuradrainage);         dringend = (Switch) findViewById(R.id.dringend);         verstorben = (Switch) findViewById(R.id.verstorben);         seticd = (LinearLayout) findViewById(R.id.seticd);         showicd = (LinearLayout) findViewById(R.id.showicd);         speichern = (Button) findViewById(R.id.button);         back = (Button) findViewById(R.id.back);         saveICD = new AlertDialog.Builder(this).create();         saveICD.setTitle("Auswählen?");         saveICD.setMessage("Wollen Sie den Code auswählen?");         saveICD.setButton("Ja", new DialogInterface.OnClickListener() {             @Override             public void onClick(DialogInterface dialog, int which) {                       selectItem();             }         });        saveICD.setButton2("Nein", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {            }        });        deleteICD = new AlertDialog.Builder(this).create();        deleteICD.setTitle("Löschen?");        deleteICD.setMessage("Wollen Sie den Code löschen?");        deleteICD.setButton("Ja", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                unselectItem();            }        });        deleteICD.setButton2("Nein", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {            }        });        mytabhost = (TabHost) findViewById(R.id.tabHost);        mytabhost.setup();        TabHost.TabSpec spec = mytabhost.newTabSpec("tab_info");        spec.setIndicator("Info");        spec.setContent(R.id.tab1);        mytabhost.addTab(spec);        mytabhost.addTab(mytabhost.newTabSpec("tab_behandlung").setIndicator("Behandlung").setContent(R.id.tab2));        mytabhost.addTab(mytabhost.newTabSpec("tab_ICD").setIndicator("ICD").setContent(R.id.tab3));        for(int i=0;i<mytabhost.getTabWidget().getChildCount();i++)        {            TextView tv = (TextView) mytabhost.getTabWidget().getChildAt(i).findViewById(android.R.id.title); //Unselected Tabs            tv.setTextColor(Color.parseColor("#ffffff"));            tv.setTextSize(12);        }        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();        nameValuePairs.add(new BasicNameValuePair("id", scanResult));        fillList();        try {            String result = new PatientData(PatientActivity.this).execute(nameValuePairs).get();            if(!result.equals("failed")) {                try {                    System.out.println("#######################" + result);                    JSONArray jArray = new JSONArray(result);                    for (int i = 0; i < jArray.length(); i++) {                        JSONObject json_data = jArray.getJSONObject(i);                        vorname.setText(json_data.getString("vorname"));                        nachname.setText(json_data.getString("nachname"));                        svnr.setText(json_data.getString("svnr"));                        String [] geburtsdatum = json_data.getString("geburtsdatum").split("-");                        tag.setText(geburtsdatum[2]);                        monat.setText(geburtsdatum[1]);                        jahr.setText(geburtsdatum[0]);                        //dpResult.init(Integer.parseInt(initPicker[0]),Integer.parseInt(initPicker[1])-1,Integer.parseInt(initPicker[2]),null);                        //gebdatum.setText(json_data.getString("geburtsdatum"));                        krankenhaus.setText(json_data.getString("krankenhausadresse"));                        System.out.println("####################"+json_data.getString("krankenhausadresse"));                        medikamente.setText(json_data.getString("medikamente"));                        benachrichtigung.setText(json_data.getString("benachrichtigung"));                        notizen.setText(json_data.getString("notizen"));                        prioritaet =  json_data.getString("prioritaetBehandlung");                        switch(prioritaet.charAt(0)){                             case('1'): t1.setBackgroundColor(Color.parseColor("#f44336"));                                        this.prioritaet = "1";                                        break;                             case('2'): t2.setBackgroundColor(Color.parseColor("#ff9800"));                                        this.prioritaet= "2";                                        break;                             case('3'): t3.setBackgroundColor(Color.YELLOW);                                        this.prioritaet= "3";                                        break;                             case('4'): t4.setBackgroundColor(Color.GREEN);                                        this.prioritaet= "4";                                        break;                             default:   this.prioritaet ="0";                         }                           bewusstsein.setChecked(checkString(json_data.getString("bewusstsein")));                           atmung.setChecked(checkString(json_data.getString("atmung")));                           kreislauf.setChecked(checkString(json_data.getString("kreislauf")));                           sauerstoff.setChecked(checkString(json_data.getString("sauerstoff")));                           intubation.setChecked(checkString(json_data.getString("intubation")));                           beatmung.setChecked(checkString(json_data.getString("beatmung")));                           blutstillung.setChecked(checkString(json_data.getString("blutstillung")));                           pleuradrainage.setChecked(checkString(json_data.getString("pleuradrainage")));                           dringend.setChecked(checkString(json_data.getString("dringend")));                           verstorben.setChecked(checkString(json_data.getString("verstorben")));                    }                    phpfile="https://81.217.54.146/showICDpatient.php";                    result = new PatientData(PatientActivity.this).execute(nameValuePairs).get();                    if(!result.equals("failed")){                        JSONArray jArray1 = new JSONArray(result);                        for (int i = 0; i < jArray1.length(); i++) {                            JSONObject json_data1 = jArray1.getJSONObject(i);                            selectedICDS.add(json_data1.getString("code") + " " + json_data1.getString("krankheit"));                            positions.add(json_data1.getString("id"));                        }                        selectedAdapter.notifyDataSetChanged();                    }                } catch (JSONException e) {                    Log.e("log_tag", "Error parsing data " + e.toString());                }            }else{                this.insert = true;            }        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }    }    public void fillList(){       icdCodes = new ArrayList<String>();       List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();       nameValuePairs.add(new BasicNameValuePair("id", scanResult));       phpfile = "https://81.217.54.146/showICD.php";        try {            String result = new PatientData(PatientActivity.this).execute(nameValuePairs).get();            System.out.println(result);            JSONArray jArray = new JSONArray(result);            for (int i = 0; i < jArray.length(); i++) {                JSONObject json_data = jArray.getJSONObject(i);                icdKeys.add(json_data.getString("id"));                icdCodes.add(json_data.getString("code")+ " "+ json_data.getString("krankheit"));            }        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        } catch (JSONException e) {            e.printStackTrace();        }        dataAdapter = new ArrayAdapter<String>(this,R.layout.icdcodelist,icdCodes);        selectedAdapter = new ArrayAdapter<String>(this,R.layout.icdcodelist,selectedICDS);        listICD = (ListView) findViewById(R.id.listviewICD);        listSelectedICD = (ListView) findViewById(R.id.listviewSelectedICD);        listSelectedICD.setAdapter(selectedAdapter);        listSelectedICD.setEmptyView(findViewById(R.id.empty));        listICD.setAdapter(dataAdapter);        listICD.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                view.setSelected(true);                String dbICD = (String) parent.getItemAtPosition(position);                String dbCode[] = dbICD.split(" ");                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();                nameValuePairs.add(new BasicNameValuePair("code", dbCode[0]));                phpfile = "https://81.217.54.146/getICDId.php";                try {                    String result = new PatientData(PatientActivity.this).execute(nameValuePairs).get();                    System.out.println(result);                    JSONArray jArray = new JSONArray(result);                    for (int i = 0; i < jArray.length(); i++) {                        JSONObject json_data = jArray.getJSONObject(i);                        dbPosition = (json_data.getString("id"));                    }                } catch (InterruptedException e) {                    e.printStackTrace();                } catch (ExecutionException e) {                    e.printStackTrace();                } catch (JSONException e) {                    e.printStackTrace();                }                positionDialog = position;                saveICD.show();            }        });        listSelectedICD.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                view.setSelected(true);                positionDialog = position;                deleteICD.show();            }        });        search = (EditText) findViewById(R.id.searchicd);        search.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {                          dataAdapter.getFilter().filter(s.toString());            }            @Override            public void afterTextChanged(Editable s) {            }        });    }    public void selectItem(){        int pos = Integer.parseInt(dbPosition);        if (!selectedICDS.contains(icdCodes.get(pos-1))) {            selectedICDS.add(icdCodes.get(pos-1));            positions.add(dbPosition);            selectedAdapter.notifyDataSetChanged();        }else{            Toast.makeText(this,                    "Code wurde schon ausgewählt", Toast.LENGTH_LONG)                    .show();        }    }    public void unselectItem(){        positions.remove(positionDialog);        selectedICDS.remove(selectedICDS.get(positionDialog));        selectedAdapter.notifyDataSetChanged();    }    public boolean checkString(String s){        if(s.equals("1")){            return true;        }else{            return false;        }    }    public void onClickSave(View view){        if(insert){            String result="";            phpfile = "https://81.217.54.146/insertPatient.php";            try {                result = new PatientData(PatientActivity.this).execute(getValueList()).get();            } catch (InterruptedException e) {                e.printStackTrace();            } catch (ExecutionException e) {                e.printStackTrace();            }            if("success".equals(result)){                insert = false;                Toast.makeText(this,                        "Daten wurden gespeichert", Toast.LENGTH_LONG)                        .show();            }        }else{            String result="";            phpfile = "https://81.217.54.146/updatePatient.php";            try {                result = new PatientData(PatientActivity.this).execute(getValueList()).get();            } catch (InterruptedException e) {                e.printStackTrace();            } catch (ExecutionException e) {                e.printStackTrace();            }            if("success".equals(result)){                Toast.makeText(this,                        "Daten wurden geaendert", Toast.LENGTH_LONG)                        .show();            }        }    }    public void onClickICD(View view){        //fillList();        showicd.setVisibility(View.GONE);        seticd.setVisibility(View.VISIBLE);        speichern.setVisibility(View.GONE);        back.setVisibility(View.VISIBLE);    }    public void onClickBack(View view){        showicd.setVisibility(View.VISIBLE);        seticd.setVisibility(View.GONE);        speichern.setVisibility(View.VISIBLE);        back.setVisibility(View.GONE);    }    View.OnClickListener triageHandler = new View.OnClickListener() {        public void onClick(View v) {            switch(v.getId()) {                case R.id.triage1:                    t1.setBackgroundColor(Color.parseColor("#f44336"));                    t2.setBackgroundResource(android.R.drawable.btn_default);                    t3.setBackgroundResource(android.R.drawable.btn_default);                    t4.setBackgroundResource(android.R.drawable.btn_default);                    prioritaet = "1";                    break;                case R.id.triage2:                    t2.setBackgroundColor(Color.parseColor("#ff9800"));                    t1.setBackgroundResource(android.R.drawable.btn_default);                    t3.setBackgroundResource(android.R.drawable.btn_default);                    t4.setBackgroundResource(android.R.drawable.btn_default);                    prioritaet = "2";                    break;                case R.id.triage3:                    t3.setBackgroundColor(Color.YELLOW);                    t1.setBackgroundResource(android.R.drawable.btn_default);                    t2.setBackgroundResource(android.R.drawable.btn_default);                    t4.setBackgroundResource(android.R.drawable.btn_default);                    prioritaet = "3";                    break;                case R.id.triage4:                    t4.setBackgroundColor(Color.GREEN);                    t1.setBackgroundResource(android.R.drawable.btn_default);                    t2.setBackgroundResource(android.R.drawable.btn_default);                    t3.setBackgroundResource(android.R.drawable.btn_default);                    prioritaet = "4";                    break;            }        }    };    @Override    public void onBackPressed() {        super.onBackPressed();    }    public List<NameValuePair> getValueList(){        String gebdatum = new StringBuilder().append(jahr.getText().toString()).append("-").append(monat.getText().toString()).append("-").append(tag.getText().toString()).toString();        Patient p1 = new Patient(scanResult,this.vorname.getText().toString(),this.nachname.getText().toString(),this.svnr.getText().toString(),gebdatum,        this.krankenhaus.getText().toString(),this.prioritaet,this.bewusstsein.isChecked(),this.atmung.isChecked(),         this.kreislauf.isChecked(),this.sauerstoff.isChecked(),this.intubation.isChecked(),this.beatmung.isChecked(),this.blutstillung.isChecked(),this.pleuradrainage.isChecked(), this.dringend.isChecked(), this.verstorben.isChecked(),         this.medikamente.getText().toString(), this.benachrichtigung.getText().toString(), this.notizen.getText().toString());        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();        nameValuePairs.add(new BasicNameValuePair("id", scanResult));        nameValuePairs.add(new BasicNameValuePair("vorname", p1.getVorname()));        nameValuePairs.add(new BasicNameValuePair("nachname", p1.getNachname()));        nameValuePairs.add(new BasicNameValuePair("svnr", p1.getSvnr()));        nameValuePairs.add(new BasicNameValuePair("gebdatum", p1.getGebdatum()));        nameValuePairs.add(new BasicNameValuePair("krankenhaus", p1.getKrankenhaus()));        nameValuePairs.add(new BasicNameValuePair("prioritaet", p1.getPrioritaet()));        nameValuePairs.add(new BasicNameValuePair("bewusstsein", p1.getBewusstsein()));        nameValuePairs.add(new BasicNameValuePair("atmung", p1.getAtmung()));        nameValuePairs.add(new BasicNameValuePair("kreislauf", p1.getKreislauf()));        nameValuePairs.add(new BasicNameValuePair("sauerstoff", p1.getSauerstoff()));        nameValuePairs.add(new BasicNameValuePair("intubation", p1.getIntubation()));        nameValuePairs.add(new BasicNameValuePair("beatmung", p1.getBeatmung()));        nameValuePairs.add(new BasicNameValuePair("blutstillung", p1.getBlutstillung()));        nameValuePairs.add(new BasicNameValuePair("pleuradrainage", p1.getPleuradrainage()));        nameValuePairs.add(new BasicNameValuePair("dringend", p1.getDringend()));        nameValuePairs.add(new BasicNameValuePair("verstorben", p1.getVerstorben()));        nameValuePairs.add(new BasicNameValuePair("medikamente", p1.getMedikamente()));        nameValuePairs.add(new BasicNameValuePair("benachrichtigung", p1.getBenachrichtigung()));        nameValuePairs.add(new BasicNameValuePair("notizen", p1.getNotizen()));        nameValuePairs.add(new BasicNameValuePair("einsatzId", einsatzID));        for(String s : positions){            nameValuePairs.add(new BasicNameValuePair("positions[]",s));        }        return nameValuePairs;    }    public String getScanResult() {        return scanResult;    }    public void setScanResult(String scanResult) {        this.scanResult = scanResult;    }    public static String getPhpfile() {        return phpfile;    }    public static void setPhpfile(String phpfile) {        PatientActivity.phpfile = phpfile;    }    @Override    public void onSaveInstanceState(Bundle savedInstanceState) {        super.onSaveInstanceState(savedInstanceState);    }    @Override    public void onRestoreInstanceState(Bundle savedInstanceState) {        // Always call the superclass so it can restore the view hierarchy        super.onRestoreInstanceState(savedInstanceState);    }}